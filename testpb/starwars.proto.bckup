// Copyright 2021 Edward McFarlane. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package larking.testpb;

// Implements https://relay.dev/docs/en/graphql-server-specification.html

message Faction {
  option (larking.api.relay).node = {
    rpc : "larking.testpb.StarWars.GetFaction(id : id)"
  };

  string id = 1;
  string name = 2;

  option (larking.api.relay).connection = {
    name : "ships"
    rpc : "larking.testpb.StarWars.ListShips(faction_id : id)"
  };
}

message GetFactionRequest { string name = 1; }

message Ship {
  option (larking.api.relay).node = {
    rpc : "larking.testpb.StarWars.GetShip(id : id)"
  };

  string id = 1;
  string name = 2;
}

message ListShipsRequest { string faction_id = 1; }

message ListShipsResponse {
  repeated Ship ships = 1;
  bool has_next_page = 2;
  bool has_previous_page = 3;
  string start_cursor = 4;
  string end_cursor = 5;
}

// type Query {
//  rebels: Faction
//  empire: Faction
//  node(id: ID!): Node
//}
//
// type Mutation {
//  introduceShip(input: IntroduceShipInput!): IntroduceShipPayload
//}
service StarWars {

  rpc GetRebels(google.protobuf.Empty) returns (Faction) {
    option (larking.api.relay) = {
      query : "rebels"
    };
  }

  rpc GetFaction(GetFactionRequest) returns (Faction) {
    option (larking.api.relay) = {
      query : "rebels(name : 'rebels')"
    };
    option (larking.api.relay) = {
      "rebels"->
      name : "rebels"
    }
  }

  rpc ListShips(ListShipsRequest) returns (ListShipsResponse)
}
